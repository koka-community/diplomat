// generated by diplomat-tool




pub alias ICU4XFixedDecimalFormatterOptions-c = c-pointer<ICU4XFixedDecimalFormatterOptions>;
pub alias ICU4XFixedDecimalFormatterOptions-co = owned-c<ICU4XFixedDecimalFormatterOptions>;
pub alias ICU4XFixedDecimalFormatterOptions-cb<s::S> = borrowed-c<s,ICU4XFixedDecimalFormatterOptions>;
  // @int32()
pub extern external/grouping_strategy(c: c-pointer<ICU4XFixedDecimalFormatterOptions>): io-noexn int
  c inline "((ICU4XFixedDecimalFormatterOptions)#1)->grouping_strategy";
  // @bool()
pub extern external/some_other_config(c: c-pointer<ICU4XFixedDecimalFormatterOptions>): io-noexn bool
  c inline "((ICU4XFixedDecimalFormatterOptions)#1)->some_other_config";

pub type ICU4XFixedDecimalFormatterOptions

  ICU4XFixedDecimalGroupingStrategy grouping_strategy;
  bool some_other_config;

  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  // ignore: unused_element
  ICU4XFixedDecimalFormatterOptions._fromFfi(_ICU4XFixedDecimalFormatterOptionsFfi ffi) :
    grouping_strategy = ICU4XFixedDecimalGroupingStrategy.values[ffi.grouping_strategy],
    some_other_config = ffi.some_other_config;

  // ignore: unused_element
  _ICU4XFixedDecimalFormatterOptionsFfi _toFfi(ffi.Allocator temp) {
    final struct = ffi.Struct.create<_ICU4XFixedDecimalFormatterOptionsFfi>();
    struct.grouping_strategy = grouping_strategy.index;
    struct.some_other_config = some_other_config;
    return struct;
  }

  factory ICU4XFixedDecimalFormatterOptions({ICU4XFixedDecimalGroupingStrategy? grouping_strategy, bool? some_other_config}) {
    final result = _ICU4XFixedDecimalFormatterOptions_default();
    final dart = ICU4XFixedDecimalFormatterOptions._fromFfi(result);
    if (grouping_strategy != null) {
      dart.grouping_strategy = grouping_strategy;
    }
    if (some_other_config != null) {
      dart.some_other_config = some_other_config;
    }
    return dart;
  }

  @override
  bool operator ==(Object other) =>
      other is ICU4XFixedDecimalFormatterOptions &&
      other.grouping_strategy == grouping_strategy &&
      other.some_other_config == some_other_config;

  @override
  int get hashCode => Object.hashAll([
        grouping_strategy,
        some_other_config,
      ]);

extern ICU4XFixedDecimalFormatterOptions_default() : io _ICU4XFixedDecimalFormatterOptionsFfi
  c "ICU4XFixedDecimalFormatterOptions_default"