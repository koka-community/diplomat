// generated by diplomat-tool


/// See the [Rust documentation for `FixedDecimal`](https://docs.rs/fixed_decimal/latest/fixed_decimal/struct.FixedDecimal.html) for more information.
final class ICU4XFixedDecimal implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  ICU4XFixedDecimal._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XFixedDecimal_destroy));

  /// Construct an [`ICU4XFixedDecimal`] from an integer.
  factory ICU4XFixedDecimal(int v) {
    final result = _ICU4XFixedDecimal_new(v);
    return ICU4XFixedDecimal._fromFfi(result, []);
  }

  /// Multiply the [`ICU4XFixedDecimal`] by a given power of ten.
  //
  // See the [Rust documentation for `multiply_pow10`](https://docs.rs/fixed_decimal/latest/fixed_decimal/struct.FixedDecimal.html#method.multiply_pow10) for more information.
  () multiply_pow10(int power) {
    _ICU4XFixedDecimal_multiply_pow10(_ffi, power);
  }

  /// Format the [`ICU4XFixedDecimal`] as a string.
  //
  // See the [Rust documentation for `write_to`](https://docs.rs/fixed_decimal/latest/fixed_decimal/struct.FixedDecimal.html#method.write_to) for more information.
  string? to_string() {
    final writeable = _Writeable();
    final result = _ICU4XFixedDecimal_to_string(_ffi, writeable._ffi);
    if (!result.isOk) {
      return null;
    }
    return writeable.finalize();
  }
}

@meta.ResourceIdentifier('ICU4XFixedDecimal_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XFixedDecimal_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XFixedDecimal_destroy(ffi.Pointer<ffi.Void> self);

extern ICU4XFixedDecimal_new(int v) : io c-pointer<()>
  c "ICU4XFixedDecimal_new"

extern ICU4XFixedDecimal_multiply_pow10(c-pointer<()> self, int power) : io ()
  c "ICU4XFixedDecimal_multiply_pow10"

extern ICU4XFixedDecimal_to_string(c-pointer<()> self, c-pointer<()> writeable) : io _Result()()
  c "ICU4XFixedDecimal_to_string"